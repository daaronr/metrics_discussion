citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
citr:::insert_citation()
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = "support/header.html")
},  error = function(e) {
print("you are not online, so we can't download")
}
)
{source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/functions.R')
source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/baseoptions.R')
},  error = function(e) {
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = "support/header.html")
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = "support/tufte_plus.css")
},  error = function(e) {
print("you are not online, so we can't download")
}
)
tryCatch(
{source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/functions.R')
source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/baseoptions.R')
},  error = function(e) {
print("you are not online, so we source locally instead; hope you've updated")
source(here("code", "functions.R")) # functions grabbed from web and created by us for analysis/output
source(here("code", "baseoptions.R")) # Basic options used across files and shortcut functions, e.g., 'pp()' for print
}
)
tryCatch(
{source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/functions.R')
source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/baseoptions.R')
},  error = function(e) {
print("you are not online, so we source locally instead; hope you've updated")
source(here("code", "functions.R")) # functions grabbed from web and created by us for analysis/output
source(here("code", "baseoptions.R")) # Basic options used across files and shortcut functions, e.g., 'pp()' for print
}
)
source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/functions.R')
library(here)
library(here)
library(devtools)
tryCatch(
{source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/functions.R')
source_url('https://raw.githubusercontent.com/daaronr/dr-rstuff/master/functions/baseoptions.R')
},  error = function(e) {
print("you are not online, so we source locally instead; hope you've updated")
source(here("code", "functions.R")) # functions grabbed from web and created by us for analysis/output
source(here("code", "baseoptions.R")) # Basic options used across files and shortcut functions, e.g., 'pp()' for print
}
)
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = here("support", "tufte_plus.css"))
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = "support/header.html")
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = here("support", "tufte_plus.css"))
},  error = function(e) {
print("you are not online, so we can't download")
}
)
library(here)
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = here("support", "header.html"))
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = here("support", "tufte_plus.css"))
download.file(url = "https://www.dropbox.com/s/24ndb3p9aa0tfv2/reinstein_references.bib?dl=0", destfile = "reinstein_references.bib")
},  error = function(e) {
print("you are not online, so we can't download")
}
)
citr:::insert_citation()
citr:::insert_citation()
library(here)
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = here("support", "header.html"))
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = here("support", "tufte_plus.css"))
download.file(url = "https://www.dropbox.com/s/24ndb3p9aa0tfv2/reinstein_references.bib?raw=1", destfile = "reinstein_references.bib")
},  error = function(e) {
print("you are not online, so we can't download")
}
)
library(here)
tryCatch(
{
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/header.html", destfile = here("support", "header.html"))
download.file(url = "https://raw.githubusercontent.com/daaronr/dr-rstuff/master/bookdown_template/support/tufte_plus.css", destfile = here("support", "tufte_plus.css"))
download.file(url = "https://www.dropbox.com/s/3i8bjrgo8u08v5w/reinstein_bibtex.bib?raw=1", destfile = "reinstein_references.bib")
},  error = function(e) {
print("you are not online, so we can't download")
}
)
library(meta)
devtools::install_github("MathiasHarrer/dmetar")
library(meta)
devtools::install_github("MathiasHarrer/dmetar")
library(meta)
#install.packages("brms")
library(brms)
install.packages("brms")
install.packages("brms")
library(brms)
install.packages("brms")
library(brms)
install.packages("colourpicker")
#install.packages("colourpicker")
#install.packages("brms")
library(brms)
#devtools::install_github("MathiasHarrer/dmetar")
library(meta)
#install.packages("colourpicker")
#install.packages("brms")
library(brms)
devtools::install_github("MathiasHarrer/dmetar")
source(here("code", "functions.R"))
source(here("code", "baseoptions.R"))
#install.packages("colourpicker")
#install.packages("brms")
library(brms)
#install.packages("colourpicker")
install.packages("brms")
library(brms)
uninstall(brms)
install.packages(c("arm", "backports", "bookdown", "boot", "broom", "callr", "car", "class", "cobalt", "covr", "crosstalk", "dbplyr", "DescTools", "devtools", "DT", "estimatr", "foreach", "fs", "furniture", "future", "GGally", "ggplot2", "ggrepel", "ggstance", "git2r", "gtools", "igraph", "insight", "janitor", "jtools", "KernSmooth", "labelled", "lattice", "lava", "lme4", "lubridate", "MASS", "matrixStats", "mnormt", "modelr", "nlme", "nloptr", "nnet", "pillar", "pkgbuild", "PKI", "plyr", "purrr", "pwr", "quantreg", "Rcpp", "RCurl", "recipes", "reshape2", "rex", "rlang", "robustbase", "roxygen2", "shiny", "sjlabelled", "skimr", "spatial", "survival", "tibble", "tinytex", "todor", "usethis", "withr", "xaringan", "xfun", "xml2", "zoo"))
install.packages(c("arm", "backports", "bookdown", "boot", "broom", "callr", "car", "class", "cobalt", "covr", "crosstalk", "dbplyr", "DescTools", "devtools", "DT", "estimatr", "foreach", "fs", "furniture", "future", "GGally", "ggplot2", "ggrepel", "ggstance", "git2r", "gtools", "igraph", "insight", "janitor", "jtools", "KernSmooth", "labelled", "lattice", "lava", "lme4", "lubridate", "MASS", "matrixStats", "mnormt", "modelr", "nlme", "nloptr", "nnet", "pillar", "pkgbuild", "PKI", "plyr", "purrr", "pwr", "quantreg", "Rcpp", "RCurl", "recipes", "reshape2", "rex", "rlang", "robustbase", "roxygen2", "shiny", "sjlabelled", "skimr", "spatial", "survival", "tibble", "tinytex", "todor", "usethis", "withr", "xaringan", "xfun", "xml2", "zoo"))
library(brms)
library("brms", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("brms")
detach("package:stats", unload=TRUE)
library("stats", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("StanHeaders", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("StanHeaders")
library("rstan", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
library("rstantools", lib.loc="/Library/Frameworks/R.framework/Versions/3.6/Resources/library")
remove.packages("rstan")
remove.packages("rstantools")
#install.packages("colourpicker")
install.packages("brms")
install.packages("brms")
library(brms)
library(brms)
remove.packages("brms")
if (!requireNamespace("remotes")) {
install.packages("remotes")
}
remotes::install_github("paul-buerkner/brms")
library(brms)
remove.packages("rstan")
if (file.exists(".RData")) file.remove(".RData")
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies = TRUE)
pkgbuild::has_build_tools(debug = TRUE)
library(brms)
install.packages("brms")
library(brms)
library(lobstr)
library(lobstr)
install.packages("library(lobstr)")
expr(mean(x, na.rm = TRUE))
library(rlang)
expr(mean(x, na.rm = TRUE))
expr(mean(x, na.rm = TRUE)) %>% str
expr(mean(x, na.rm = TRUE)) %>% str()
env_names(e1)
ThirdWave
m.brm <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = ThirdWave,
prior = priors,
iter = 30)
#devtools::install_github("MathiasHarrer/dmetar")
#...I did not 'update new packages'
#install.packages("extraDistr")
library(meta)
#install.packages("brms")
library(brms)
library(dmetar)
library(extraDistr)
library(png)
library(grid)
img <- readPNG(here("images", "half_cauchy.png"))
m.brm <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = ThirdWave,
prior = priors,
iter = 30)
priors <- c(prior(normal(0,1), class = Intercept), prior(cauchy(0,0.5), class = sd))
m.brm <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = ThirdWave,
prior = priors,
iter = 30)
m.brm <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = ThirdWave,
prior = priors,
iter = 30)
models
ggplot(sim1, aes(x, y)) +
sdf
ggplot(sim1, aes(x, y))
library(modelr)
models <- tibble(
a1 = runif(250, -20, 40),
a2 = runif(250, -5, 5)
)
m.brm <- brm(TE|se(seTE) ~ 1 + (1|Author),
data = ThirdWave,
prior = priors,
iter = 4000)
m.brm
r
r
m.brm
pp_check(m.brm)
summary(m.brm)
ranef(m.brm)
ThirdWave
c(ranef(m.brm))
c(ranef(m.brm),ThirdWave$TE )
bind(ranef(m.brm),ThirdWave$TE )
cbind(ranef(m.brm),ThirdWave$TE )
rbind(ranef(m.brm),ThirdWave$TE )
cbind(ranef(m.brm)$1,ThirdWave$TE )
cbind(ranef(m.brm)$Estimate,ThirdWave$TE )
ranef(m.brm)
ranef(m.brm)[1]
ranef(m.brm) %>% str()
ranef(m.brm) %>% as.tibble
ranef(m.brm) %>% as.tibble()
ranef(m.brm) %>% as_tibble()
ranef(m.brm) %>% as_matrix()
ThirdWave$TE
ThirdWave
ranef(m.brm)()
ranef(m.brm)
m.brm
post.samples <- posterior_samples(m.brm, c("^b", "^sd"))
names(post.samples)
?posterior_samples
post.samples
#devtools::install_github("MathiasHarrer/dmetar")
#...I did not 'update new packages'
#install.packages("extraDistr")
library(meta)
#install.packages("brms")
library(brms)
library(dmetar)
library(extraDistr)
library(png)
library(grid)
img <- readPNG(here("images", "half_cauchy.png"))
source(here("code", "functions.R"))
source(here("code", "baseoptions.R"))
library(here)
source(here("code", "functions.R"))
library(here)
source(here("code", "functions.R"))
library(here)
source(../code/functions.R)
getwd()
source(code/functions.R)
getwd()
ranef(m.brm)
names(post.samples) <- c("smd", "tau")
# Plot for SMD
ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
library(tidyverse)
library(ggplot)
install.packages("ggplot")
library(ggplot2)
# Plot for SMD
ggplot2(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
# Plot for SMD
ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
# Plot for SMD
(
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal()
)
# Plot for SMD
(
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal() +
ggtitle(“Standardized mean difference”, subtitle = “Posterior density plot”)
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal() +
ggtitle("Standardized mean difference", subtitle = "Posterior density plot"")
)
"
# Plot for SMD
(
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal() +
ggtitle("Standardized mean difference", subtitle = "Posterior density plot")
)
# Plot for tau
ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen", color = "lightgreen", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$tau)) +
labs(x = expression(tau),
y = element_blank()) +
theme_minimal() +
ggtitle("Between-study variation (SD = $\tau$)", subtitle = "Posterior density plot")
# Plot for SMD
(
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal() +
ggtitle("Standardized mean difference", subtitle = "Posterior density plot")
)
smd_density  <- ggplot(aes(x = smd), data = post.samples) +
geom_density(fill = "lightblue", color = "lightblue", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$smd)) +
labs(x = expression(italic(SMD)),
y = element_blank()) +
theme_minimal() +
ggtitle("Standardized mean difference", subtitle = "Posterior density plot")
# Plot for tau
tau_density <- ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen", color = "lightgreen", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$tau)) +
labs(x = expression(tau),
y = element_blank()) +
theme_minimal() +
ggtitle("Between-study variation (SD = $\tau$)", subtitle = "Posterior density plot")
require(gridExtra)
grid.arrange(smd_density, tau_density, ncol=2)
# Plot for tau
tau_density <- ggplot(aes(x = tau), data = post.samples) +
geom_density(fill = "lightgreen", color = "lightgreen", alpha = 0.7) +
geom_point(y = 0, x = mean(post.samples$tau)) +
labs(x = expression(tau),
y = element_blank()) +
theme_minimal() +
ggtitle("Between-study variation (SD = tau)", subtitle = "Posterior density plot")
grid.arrange(smd_density, tau_density, ncol=2)
smd.ecdf = ecdf(post.samples$smd)
smd.ecdf <- ecdf(post.samples$smd)
smd.ecdf
smd
JJsmd.ecdf
smd.ecdf
smd.ecdf %>% str()
post.samples
p
ecdf.dat <- data.frame(smd = 1:1000/1000, p = smd.ecdf(1:1000/1000))
ecdf.dat
ecdf
ecdf(2)
smd = 1:1000/1000
smd
smd.ecdf(1:10/10)
smd.ecdf %>% str()
smd.ecdf(1:1000/1000) %>% str()
ggplot(aes(x = smd, y = p), data = ecdf.dat) +
geom_vline(xintercept = mean(post.samples$smd), color = "grey") +
geom_line(size = 2, color = "darkblue") +
theme_minimal() +
labs(x = "SMD", y = "Cumulative Probability") +
ggtitle("ECDF: Posterior Distribution of the Pooled Effect Size")
smd.ecdf(0.3)
smd.ecdf(0.300)
smd.ecdf <- ecdf(post.samples$smd)
smd.ecdf(0.3)
smd.ecdf <- ecdf(post.samples$smd) #cumulative distribution computed on the posterior samples/ simulations of the SMD
ecdf.dat <- data.frame(smd = 1:1000/1000, p = smd.ecdf(1:1000/1000)) #makes a data frame from a 0-1 counter in .001 units, and of the increments of the aforementioned cdf (I guess)
ggplot(aes(x = smd, y = p), data = ecdf.dat) +
geom_vline(xintercept = mean(post.samples$smd), color = "grey") +
geom_line(size = 2, color = "darkblue") +
theme_minimal() +
labs(x = "SMD", y = "Cumulative Probability") +
ggtitle("ECDF: Posterior Distribution of the Pooled Effect Size")
library(pacman)
pload(tidyverse, meta)
library(pacman)
p_load(tidyverse, meta)
p_load(tidyverse, meta, brms, dmetar, extraDistr, ggplot2, tidybayes, dplyr, ggplot2, ggridges, glue, stringr, forcats)
study.draws <- spread_draws(m.brm, r_Author[Author,], b_Intercept) %>%
mutate(b_Intercept = r_Author + b_Intercept)
study.draws
pooled.effect.draws <- spread_draws(m.brm, b_Intercept) %>%
mutate(Author = "Pooled Effect")
pooled.effect.draws
forest.data <- bind_rows(study.draws, pooled.effect.draws) %>%
ungroup() %>%
mutate(Author = str_replace_all(Author, "[.]", " ")) %>%
mutate(Author = reorder(Author, b_Intercept))
mean_qi
?mean_qi
forest.data.summary <- group_by(forest.data, Author) %>%
mean_qi(b_Intercept)
ggplot(aes(b_Intercept, relevel(Author, "Pooled Effect", after = Inf)),
data = forest.data) +
geom_vline(xintercept = fixef(m.brm)[1, 1], color = "grey", size = 1) +
geom_vline(xintercept = fixef(m.brm)[1, 3:4], color = "grey", linetype = 2) +
geom_vline(xintercept = 0, color = "black", size = 1) +
geom_density_ridges(fill = "blue", rel_min_height = 0.01, col = NA, scale = 1,
alpha = 0.8) +
geom_pointintervalh(data = forest.data.summary, size = 1) +
geom_text(data = mutate_if(forest.data.summary, is.numeric, round, 2),
aes(label = glue("{b_Intercept} [{.lower}, {.upper}]"), x = Inf), hjust = "inward") +
labs(x = "Standardized Mean Difference",
y = element_blank()) +
theme_minimal()
